from aiogram import F, Router , Bot , types , Dispatcher
import datetime
import asyncio
import time
import random
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
bot = Bot(token='7669581824:AAHgxatHQ1Dv0oJnHJeGemo--1c1O0haEkw')
import app.keyboards as kb
price = round(random.uniform(0, 1), 6)
router = Router()
monetaf = 0
class Register(StatesGroup):
    name = State()
    age = State()
    number = State()
@router.message(CommandStart())
async def cmd_start(message: Message):
    await bot.send_photo(message.chat.id, photo='https://api.neuro-holst.ru/api/v1/image/share/render/bONO9K99L86K', caption='')
    await message.answer('üèπüèπ–ü—Ä–∏–≤–µ—Ç!–ò—â–µ—à—å –ø–æ–Ω—è—Ç–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π?–¢–æ–≥–¥–∞ –∑–Ω–∞–∫–æ–º—å—Å—è , Wild Hunt - —ç—Ç–æ –¥–æ—Å—Ç—É–ø–Ω—ã–π –¥–ª—è –≤—Å–µ—Ö —Å–ø–æ—Å–æ–± –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –∏ –∏–Ω–≤–∏—Å—Ç–∏—Ü–∏–π!!üèπüèπ', reply_markup=kb.main)
    await message.reply('üíµüíµ–¢—ã –º–æ–∂–µ—à—å –ø–æ–∫—É–ø–∞—Ç—å  –æ—Ö–æ—Ç–Ω–∏–∫–æ–≤ –∏ –ø–æ–ª—É—á–∞—Ç—å —Å –Ω–∏—Ö —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥ , —Ç–∞–∫–∂–µ —Ç—ã –º–æ–∂–µ—à—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å , —É—á–∞–≤—Å—Ç–≤—É—è –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä—Å–∞—Ö!!!üíµüíµ')
    await message.reply('–¢–∞–∫–∂–µ –∑–∞—Ö–æ–¥–∏ –≤ –Ω–∞—à –∫–∞–Ω–∞–ª  —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ https://t.me/wild_hunt_communiti, –≥–¥–µ —Ç—ã –º–æ–∂–µ—à—å –æ–±—Å—É–¥–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –≤—ã—Å–∫–∞–∑–∞—Ç—å —Å–≤–æ–µ –º–Ω–µ–Ω–∏–µ.–£–¥–∞—á–∏!!!')
    global idi
    idi = str(message.from_user.id )
    global kiku
    kiku = idi
    print(idi)
    proverka_balance(idi)
def proverka_balance(username):
    with open('balances.txt', 'r') as file:
        lines = file.readlines()
    
    with open('balances.txt', 'w') as file:
        h = 0
        for line in lines:
            user, balance , banan , apple , grug , refcod , referal , kubok = line.strip().split(',')
            file.write(f'{user},{balance},{banan},{apple},{grug},{refcod},{referal},{kubok}\n')
            if user == username:
                h = 1
        if h == 0 :
            user = username
            balance = 1000
            banan = 0
            apple = 0
            grug = 0
            refcod = round(random.uniform(1, 10000000), 2)
            referal = 0
            kubok = 0
            file.write(f'{user},{balance},{banan},{apple},{grug},{refcod},{referal},{kubok}\n')
def update_balance(username, new_balance):
    with open('balances.txt', 'r') as file:
        lines = file.readlines()
    
    with open('balances.txt', 'w') as file:
        for line in lines:
            user, balance , banan , apple , grug , refcod , referal , kubok = line.strip().split(',')
            if user == username:
                new_balance = int(new_balance)
                balance = int(balance)
                balance = balance + new_balance
                balance = str(balance)
            file.write(f'{user},{balance},{banan},{apple},{grug},{refcod},{referal},{kubok}\n')
def smotr_balance(username):
    with open('balances.txt', 'r') as file:
        lines = file.readlines()
    
    with open('balances.txt', 'r') as file:
        for line in lines:
            user, balance , banan , apple , grug , refcod , referal , kubok = line.strip().split(',')
            if user == username:
                return balance
def smotr_kubok(username):
    with open('balances.txt', 'r') as file:
        lines = file.readlines()
    
    with open('balances.txt', 'r') as file:
        for line in lines:
            user, balance , banan , apple , grug , refcod , referal , kubok = line.strip().split(',')
            if user == username:
                return kubok
def update_kubok(username, x):
    with open('balances.txt', 'r') as file:
        lines = file.readlines()
    
    with open('balances.txt', 'w') as file:
        for line in lines:
            user, balance , banan , apple , grug , refcod , referal , kubok = line.strip().split(',')
            if user == username:
                j = int(kubok)
                j += int(x)
                kubok = str(j)
            file.write(f'{user},{balance},{banan},{apple},{grug},{refcod},{referal},{kubok}\n')
def smotr_refcod(username):
    with open('balances.txt', 'r') as file:
        lines = file.readlines()
    
    with open('balances.txt', 'r') as file:
        for line in lines:
            user, balance , banan , apple , grug , refcod , referal , kubok= line.strip().split(',')
            if user == username:
                return refcod
def update_referal(username):
    with open('balances.txt', 'r') as file:
        lines = file.readlines()
    
    with open('balances.txt', 'w') as file:
        for line in lines:
            user, balance , banan , apple , grug , refcod , referal , kubok = line.strip().split(',')
            if refcod == username:
                referal += 1
            file.write(f'{user},{balance},{banan},{apple},{grug},{refcod},{referal},{kubok}\n')
def smotr_referal(username):
    with open('balances.txt', 'r') as file:
        lines = file.readlines()
    
    with open('balances.txt', 'r') as file:
        for line in lines:
            user, balance , banan , apple , grug , refcod , referal , kubok= line.strip().split(',')
            if user == username:
                return referal
                
            

def smotr_banan(username):
    with open('balances.txt', 'r') as file:
        lines = file.readlines()
    
    with open('balances.txt', 'r') as file:
        kik = 0
        for line in lines:
            user, balance , banan , apple , grug , refcod , referal , kubok = line.strip().split(',')
            if user == username:
                kik = 1
        if kik == 1 :
            return banan
        
def smotr_apple(username):
    with open('balances.txt', 'r') as file:
        lines = file.readlines()
    
    with open('balances.txt', 'r') as file:
        kik = 0
        for line in lines:
            user, balance , banan , apple , grug , refcod , referal , kubok = line.strip().split(',')
            if user == username:
                kik = 1
        if kik == 1 :
            return apple
        
def smotr_grug(username):
    with open('balances.txt', 'r') as file:
        lines = file.readlines()
    
    with open('balances.txt', 'r') as file:
        kik = 0
        for line in lines:
            user, balance , banan , apple , grug , refcod , referal , kubok = line.strip().split(',')
            if user == username:
                kik = 1
        if kik == 1 :
            return grug
print(id)      

def update_banan(username):
    with open('balances.txt', 'r') as file:
        lines = file.readlines()
    
    with open('balances.txt', 'w') as file:
        for line in lines:
            user, balance , banan , apple , grug , refcod , referal , kubok = line.strip().split(',')
            if user == username:
                banan = int(banan)
                banan += 1
                banan = str(banan)
            print(balance)
            file.write(f'{user},{balance},{banan},{apple},{grug},{refcod},{referal},{kubok}\n')

def update_apple(username):
    with open('balances.txt', 'r') as file:
        lines = file.readlines()
    
    with open('balances.txt', 'w') as file:
        for line in lines:
            user, balance , banan , apple , grug , refcod , referal , kubok = line.strip().split(',')
            if user == username:
                apple = int(apple)
                apple += 1
                apple = str(apple)
            print(balance)
            file.write(f'{user},{balance},{banan},{apple},{grug},{refcod},{referal},{kubok}\n')

def update_grug(username):
    with open('balances.txt', 'r') as file:
        lines = file.readlines()
    
    with open('balances.txt', 'w') as file:
        for line in lines:
            user, balance , banan , apple , grug , refcod , referal , kubok= line.strip().split(',')
            if user == username:
                grug = int(grug)
                grug += 1
                grug = str(grug)
            print(balance)
            file.write(f'{user},{balance},{banan},{apple},{grug},{refcod},{referal},{kubok}\n')
print(id)
@router.message(Command('help'))
async def cmd_help(message: Message):
    await message.answer('–í—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–º–æ—â–∏')

@router.message(F.text == 'üí∏—Ñ–∞—Ä–ºüí∏')
async def catalog(message: Message):
    await message.answer('–í—ã –º–æ–∂–µ—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ —Ñ–∞—Ä–º–∏—Ç—å —Ç—Ä–æ—Ñ–µ–∏ , —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –ø–æ–∫—É–ø–∞—Ç—å –∑–∞ –Ω–∏—Ö –æ—Ö–æ—Ç–Ω–∏–∫–æ–≤', reply_markup=kb.farm)
@router.callback_query(F.data == 'tik')
async def t_shirt(callback: CallbackQuery):
    global monetaf
    monetaf += 1

@router.callback_query(F.data == 'sobrat')
async def t_shirt(callback: CallbackQuery):
    global idi
    global monetaf
    update_kubok(idi, monetaf)
    fef = monetaf
    monetaf = 0
    await callback.message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–ª–∏ ' + str(fef) + ' –∫—É–±–∫–æ–≤\n–£ –≤–∞—Å —Å–µ–π—á–∞—Å –µ—Å—Ç—å ' + smotr_kubok(idi) + ' –∫—É–±–∫–æ–≤')

    

@router.message(F.text == 'üõí–∫—É–ø–∏—Ç—åüõí')
async def catalog(message: Message):
    await message.answer('–†–∞–∑–Ω—ã–µ —Ñ—Ä—É–∫—Ç—ã –ø—Ä–∏–Ω–æ—Å—è—Ç —Ä–∞–∑–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Ö–æ–¥–æ–≤ , –≤–æ—Ç –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∏—Ö:\n–ë–∞–Ω–∞–Ω - —Å—Ç–æ–∏—Ç 50 –º–æ–Ω–µ—Ç –∏ 10 –∫—É–±–∫–æ–≤, –ø—Ä–∏–Ω–æ—Å–∏—Ç 2 –º–æ–Ω–µ—Ç—ã –≤ –¥–µ–Ω—å , —Ä–∞–±–æ—Ç–∞–µ—Ç 30 –¥–Ω–µ–π \n–Ø–±–ª–æ–∫–æ - —Å—Ç–æ–∏—Ç 150 –º–æ–Ω–µ—Ç –∏ 30 –∫—É–±–∫–æ–≤, –ø—Ä–∏–Ω–æ—Å–∏—Ç 5 –º–æ–Ω–µ—Ç –≤ –¥–µ–Ω—å , —Ä–∞–±–æ—Ç–∞–µ—Ç 30 –¥–Ω–µ–π \n–ì—Ä—É—à–∞ - —Å—Ç–æ–∏—Ç 300 –º–æ–Ω–µ—Ç –∏ 50 –∫—É–±–∫–æ–≤, –ø—Ä–∏–Ω–æ—Å–∏—Ç 5 –º–æ–Ω–µ—Ç—ã –≤ –¥–µ–Ω—å , —Ä–∞–±–æ—Ç–∞–µ—Ç 90 –¥–Ω–µ–π\n–û–Ω–∏ –ø–µ—Ä–µ—Å—Ç–∞–Ω—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ —É—á–∏—Ç—ã–≤–∞–π—Ç–µ —ç—Ç–æ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ', reply_markup=kb.catalog)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ç–æ–≤–∞—Ä')


@router.callback_query(F.data == 't-shirt')
async def t_shirt(callback: CallbackQuery):
    global idi
    if int(smotr_balance(idi)) >= 50 and int(smotr_kubok(idi))>= 10:
        await callback.message.answer('–í—ã –∫—É–ø–∏–ª–∏ –±–∞–Ω–∞–Ω')
        balance1 = -50
        print(str(idi))
        update_banan(idi)
        balance1 = int(balance1)
        update_balance(idi, str(balance1))
        update_kubok(idi, -10)
        await callback.message.answer('—É –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å ' + str(smotr_balance(idi) + '–º–æ–Ω–µ—Ç'))
    else:
        await callback.message.answer('—É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å')
        

@router.callback_query(F.data == 'sneakers')
async def t_shirt(callback: CallbackQuery):
    global idi
    if int(smotr_balance(idi)) >= 150 and int(smotr_kubok(idi)) >= 30:
        await callback.message.answer('–í—ã –∫—É–ø–∏–ª–∏ —è–±–ª–æ–∫–æ')
        balance1 = -150
        update_apple(idi)
        update_balance(idi, str(balance1))
        update_kubok(idi, -30)
        await callback.message.answer('—É –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å ' + str(smotr_balance(idi) + '–º–æ–Ω–µ—Ç'))
    else:
        await callback.message.answer('—É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å')

@router.callback_query(F.data == 'cap')
async def t_shirt(callback: CallbackQuery):
    global idi
    if int(smotr_balance(idi)) >= 300 and int(smotr_kubok(idi)) >= 50:
        await callback.message.answer('–í—ã –∫—É–ø–∏–ª–∏ –≥—Ä—É—à—É')
        balance1 = -300
        update_grug(idi)
        update_balance(idi, str(balance1))
        update_kubok(idi, -50)
        await callback.message.answer('—É –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å ' + str(smotr_balance(idi) + '–º–æ–Ω–µ—Ç'))
    else:
        await callback.message.answer('—É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å')

@router.message(F.text == 'üëú–ö–æ—Ä–∑–∏–Ω–∞üëú')
async def cmd_start(message: Message):
    global idi
    idi = str(message.from_user.id )
    await message.answer('–≤–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞: \n–±–∞–Ω–∞–Ω–æ–≤ - '+ str(smotr_banan(idi)) + ' ,—è–±–ª–æ–∫ - '+ str(smotr_apple(idi)) + ' ,–≥—Ä—É—à - ' + str(smotr_banan(idi)))
@router.message(F.text == '‚öôÔ∏è–Ω–∞—Å—Ç—Ä–æ–π–∫–∏‚öôÔ∏è')
async def cmd_start(message: Message):
    await message.answer('–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n–ß—Ç–æ–±—ã –ø–æ–º–µ–Ω—è—Ç—å —è–∑—ã–∫ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /change launguage')
@router.message(F.text == '–º–∏–Ω–∏-–∏–≥—Ä—ã')
async def cmd_start(message: Message):
    await message.answer('–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –≤ —Ä–∞–∑–Ω—ã–µ –º–∏–Ω–∏-–∏–≥—Ä—ã , –≤–æ—Ç –∏—Ö –æ–ø–∏—Å–∞–Ω–∏–µ\n–†—É–ª–µ—Ç–∫–∞ - –≤—ã —Å—Ç–∞–≤–∏—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –Ω–∞ –∫—Ä–∞—Å–Ω—ã–π –∏–ª–∏ —á–µ—Ä–Ω—ã–π\n–°–Ω–∞–π–ø–µ—Ä - –≤—ã –Ω–∞—É–≥–∞–¥ –≤—ã–±–∏—Ä–∞–µ—Ç–µ –æ–¥–Ω—É –∏–∑ 5 –º–∏—à–µ–Ω–µ–π , –µ—Å–ª–∏ —É–≥–∞–¥–∞–ª–∏ - –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –æ–¥–Ω—É –∑–≤–µ–∑–¥—É , –∫–æ—Ç–æ—Ä—É—é –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω–µ', reply_markup=kb.igra)
@router.callback_query(F.data == 'igar1')
async def t_shirt(callback: CallbackQuery):
    global idi , suma
    await callback.message.answer('–≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–≤–∫—É', reply_markup=kb.kolvo)
@router.callback_query(F.data == 'kolvo1')
async def t_shirt(callback: CallbackQuery):
    global idi , suma
    await callback.message.answer('üßÆ')
    if random.random() >= 0.5 :
        await callback.message.answer('–≤—ã –≤—ã–π–≥—Ä–∞–ª–∏')
        update_balance(idi, 10)
    else:
        await callback.message.answer('–≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏')
        update_balance(idi, -10)
@router.callback_query(F.data == 'kolvo2')
async def t_shirt(callback: CallbackQuery):
    global idi , suma
    await callback.message.answer('üßÆ')
    if random.random() >= 0.5 :
        await callback.message.answer('–≤—ã –≤—ã–π–≥—Ä–∞–ª–∏')
        update_balance(idi, 30)
    else:
        await callback.message.answer('–≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏')
        update_balance(idi, -30)

@router.callback_query(F.data == 'kolvo3')
async def t_shirt(callback: CallbackQuery):
    global idi , suma
    await callback.message.answer('üßÆ')
    if random.random() >= 0.5 :
        await callback.message.answer('–≤—ã –≤—ã–π–≥—Ä–∞–ª–∏')
        update_balance(idi, 50)
    else:
        await callback.message.answer('–≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏')
        update_balance(idi, -50)
@router.callback_query(F.data == 'igar2')
async def t_shirt(callback: CallbackQuery):
    global idi , suma
    if random.random() >= 0.2 :
        await callback.message.answer('–≤—ã –ø–æ–ø–∞–ª–∏!!')
    else:
        await callback.message.answer('–≤—ã –ø—Ä–æ–º–∞—Ö–Ω—É–ª–∏—Å—å , –ø–æ–≤–µ–∑–µ—Ç –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑')

@router.message(F.text == 'ü™ô–º–æ–Ω–µ—Ç–∞ü™ô')
async def cmd_start(message: Message):
    global idi , price
    idi = str(message.from_user.id )
    await message.answer('–ú–æ–Ω–µ—Ç–∞ WHK - –æ–¥–Ω–∞ –∏–∑ —Å–∞–º—ã—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ—Å–ø–æ—Å–æ–±–Ω—ã—Ö –º–æ–Ω–µ—Ç –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–∫—É–ø–∞—Ç—å –∏ –ø—Ä–æ–¥–æ–≤–∞—Ç—å –µ–µ –∫–æ–≥–¥–∞ –∑–∞—Ö–æ—Ç–∏—Ç–µ.\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ - 2 –¥–æ–ª–ª–∞—Ä–∞üí≤.–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ - 5 –¥–æ–ª–ª–∞—Ä–æ–≤üí≤.\n–•–æ—Ä–æ—à–∞—è –Ω–æ–≤–æ—Å—Ç—å,–≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –∞–∫—Ü–∏—è:\n–ü—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ—Ç 3 –¥–æ–ª–ª–∞—Ä–æ–≤üí≤ - –±–æ–Ω—É—Å 1 –æ–±—ã—á–Ω—ã–π –æ—Ö–æ—Ç–Ω–∏–∫\n–ü—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ—Ç 8 –¥–æ–ª–ª–∞—Ä–æ–≤üí≤ - –±–æ–Ω—É—Å 50 –º–æ–Ω–µ—Ç\n–ü—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ—Ç 20 –¥–æ–ª–ª–∞—Ä–æ–≤üí≤ - –±–æ–Ω—É—Å 2 —ç–ª–∏—Ç–Ω—ã—Ö –æ—Ö–æ—Ç–Ω–∏–∫–∞\nüí±\n–ö—É—Ä—Å –≤–∞–ª—é—Ç—ã –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç - '+ str(price), reply_markup=kb.obmen)
suma = 5
suma3 = 150
suma4 = 10
@router.callback_query(F.data == 'vvod')
async def t_shirt(callback: CallbackQuery):
    global idi , suma
    await callback.message.answer('–≤—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö ,–Ω–∞ –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', reply_markup=kb.denga)
@router.callback_query(F.data == 'denga1')
async def t_shirt(callback: CallbackQuery):
    global idi , suma , price
    await callback.message.answer('–ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –ø—Ä–æ–≤–µ–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É https://t.me/xrocket?start=inv_UCNq39BE0j0yNuS')
    update_balance(idi, 2 // price)
@router.callback_query(F.data == 'denga1')
async def t_shirt(callback: CallbackQuery):
    global idi , suma , price
    await callback.message.answer('–ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –ø—Ä–æ–≤–µ–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É https://t.me/xrocket?start=inv_UCNq39BE0j0yNuS')
    update_balance(idi, 5 // price)
@router.callback_query(F.data == 'denga1')
async def t_shirt(callback: CallbackQuery):
    global idi , suma , price
    await callback.message.answer('–ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –ø—Ä–æ–≤–µ–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É https://t.me/xrocket?start=inv_UCNq39BE0j0yNuS')
    update_balance(idi, 15 // price)
@router.callback_query(F.data == 'vivod')
async def t_shirt(callback: CallbackQuery):
    global idi
    global price
    global suma3 
    global suma4
    await callback.message.answer('–≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö , –∫–æ—Ç–æ—Ä—É—è –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏')
    await callback.message.answer('–≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—å–∫–∞')
    update_balance(idi, int(int(suma3) / round(random.uniform(1.0, 3.0), 2)))
    
@router.message(F.text == 'üí∞–±–∞–ª–∞–Ω—Åüí∞')
async def cmd_start(message: Message):
    global idi
    global price
    idi = str(message.from_user.id )
    sis = smotr_balance(idi)
    await message.answer('üìä')
    await message.answer('–≤–∞—à –±–∞–ª–∞–Ω—Å —Å–µ–π—á–∞—Å —Ä–∞–≤–µ–Ω ' + str(sis))
    suma = int(smotr_banan(idi)) + int(smotr_apple(idi)) + int(smotr_banan(idi))
    await message.answer('—É –≤–∞—Å —Å–µ–π—á–∞—Å –µ—Å—Ç—å ' + str(suma) + ' –æ—Ö–æ—Ç–Ω–∏–∫–æ–≤')
    await message.answer('–∫—É—Ä—Å –º–æ–Ω–µ—Ç—ã –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç - ' + str(price)+'üí≤', reply_markup=kb.referal)
@router.callback_query(F.data == 'moiref')
async def t_shirt(callback: CallbackQuery):
    global idi
    await callback.message.answer('—É –≤–∞—Å –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç ' + smotr_referal(idi) + ' —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤üòî')
    await callback.message.answer('–≤–∞—à –∫–æ–¥ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ ' + str(smotr_refcod(idi)),  reply_markup=kb.kodrefa)
@router.callback_query(F.data == 'refcod')
async def t_shirt(callback: CallbackQuery):
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Ä–µ—Ñ–µ—Ä–∞–ª–∞')
    bot = Bot(token='7669581824:AAHgxatHQ1Dv0oJnHJeGemo--1c1O0haEkw')
    dp = Dispatcher(bot)
    @dp.message_handler(content_types=types.ContentTypes.TEXT)  
    async def send_message(message: types.Message):  
        await message.reply(f'–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {message.text}') 
        global kodik
        kodik = message.text
        update_referal(kodik)
        return
    


async def t_shirt(callback: CallbackQuery):
    global idi
    await callback.message.answer('üèÜ –û—Å–µ–Ω–Ω–∏–π –∫–æ–Ω–∫—É—Ä—Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n–î—Ä—É–∑—å—è! –ú—ã —Å—Ç–∞—Ä—Ç—É–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω–∫—É—Ä—Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª–∏—Ç –≤–∞–º –ø–æ–ª—É—á–∏—Ç—å –º–Ω–æ–≥–æ —Ü–µ–Ω–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤ –∏ –ø–æ–¥–∞—Ä–∫–æ–≤.üí° –í —ç—Ç–æ—Ç —Ä–∞–∑ –∫–æ–Ω–∫—É—Ä—Å –±—É–¥–µ—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å—Å—è –ø–æ –¥–≤—É–º –Ω–æ–º–∏–Ω–∞—Ü–∏—è–º, –∫–∞–∂–¥–∞—è –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥–µ—Ç –∏–º–µ—Ç—å —Å–≤–æ–π —Å–ø–∏—Å–æ–∫ –ª–∏–¥–µ—Ä–æ–≤.\n1Ô∏è‚É£ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–≥–ª–∞—Å—è—Ç –Ω–∞–∏–±–æ–ª—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.\n2Ô∏è‚É£ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —á—å–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã –≤–Ω–µ—Å—É—Ç –Ω–∞–∏–±–æ–ª—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–ø–æ–∑–∏—Ç–æ–≤.\n–í –∫–∞—á–µ—Å—Ç–≤–µ –ø—Ä–∏–∑–æ–≤ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ—Ö–æ—Ç–Ω–∏–∫–æ–≤:–°–≤—è—â–µ–Ω–Ω—ã–π –æ—Ö–æ—Ç–Ω–∏–∫ , –í–µ–ª–∏–∫–∏–π –æ—Ö–æ—Ç–Ω–∏–∫ —Å–æ–ª–Ω—Ü–∞ , –ë–µ–∑—É–º–Ω—ã–π –æ—Ö–æ—Ç–Ω–∏–∫\n–≤–∞—à–∞ —Ç–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è - 128')
async def increase_balance(x,y,z):  
    global idi
    balanc = 50 * x
    balanc = balanc + 50 * y
    balanc = balanc + 50 * z
    update_balance(idi, balanc)
@router.callback_query(F.data == 'refi')
async def t_shirt(callback: CallbackQuery):
    global idi
    await callback.message.answer('üèÜ –û—Å–µ–Ω–Ω–∏–π –∫–æ–Ω–∫—É—Ä—Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n–î—Ä—É–∑—å—è! –ú—ã —Å—Ç–∞—Ä—Ç—É–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω–∫—É—Ä—Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª–∏—Ç –≤–∞–º –ø–æ–ª—É—á–∏—Ç—å –º–Ω–æ–≥–æ —Ü–µ–Ω–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤ –∏ –ø–æ–¥–∞—Ä–∫–æ–≤.üí° –í —ç—Ç–æ—Ç —Ä–∞–∑ –∫–æ–Ω–∫—É—Ä—Å –±—É–¥–µ—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å—Å—è –ø–æ –¥–≤—É–º –Ω–æ–º–∏–Ω–∞—Ü–∏—è–º, –∫–∞–∂–¥–∞—è –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥–µ—Ç –∏–º–µ—Ç—å —Å–≤–æ–π —Å–ø–∏—Å–æ–∫ –ª–∏–¥–µ—Ä–æ–≤.\n1Ô∏è‚É£ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–≥–ª–∞—Å—è—Ç –Ω–∞–∏–±–æ–ª—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.\n2Ô∏è‚É£ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —á—å–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã –≤–Ω–µ—Å—É—Ç –Ω–∞–∏–±–æ–ª—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–ø–æ–∑–∏—Ç–æ–≤.\n–í –∫–∞—á–µ—Å—Ç–≤–µ –ø—Ä–∏–∑–æ–≤ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ—Ö–æ—Ç–Ω–∏–∫–æ–≤:–°–≤—è—â–µ–Ω–Ω—ã–π –æ—Ö–æ—Ç–Ω–∏–∫ , –í–µ–ª–∏–∫–∏–π –æ—Ö–æ—Ç–Ω–∏–∫ —Å–æ–ª–Ω—Ü–∞ , –ë–µ–∑—É–º–Ω—ã–π –æ—Ö–æ—Ç–Ω–∏–∫\n–≤–∞—à–∞ —Ç–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è - 128')
async def increase_balance(x,y,z):  
    global idi
    balanc = 50 * x
    balanc = balanc + 50 * y
    balanc = balanc + 50 * z
    update_balance(idi, balanc)
     
    

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–Ω—è –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏  
async def daily_task(x,y,z):  
    while True:  
        current_time = datetime.datetime.now()  
        if current_time.hour == 0 and current_time.minute == 0:  # –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –µ—Å—Ç—å –ª–∏ –ø–æ–ª–Ω–æ—á—å  
            await increase_balance(x,y,z)  
        await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É  

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞—á–∏  
async def on_startup(dp):  
    asyncio.create_task(daily_task(smotr_banan(idi),smotr_apple(idi),smotr_grug(idi)))  